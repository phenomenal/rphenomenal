.slide#landing-slide
  %section.middle
    %hgroup
    %h1 The Phenomenal Gem
    %h2 Putting Feature as a Service on Rails
    %span{:id=>"left-init-key"}
    =image_tag("pheno_logo.png")
    %h3 Thibault Poncelet & Loïc Vigneron
    %h4 June 2012

.slide#table-of-contents
  %header
    %h1 Contents
  %section
    %ol#toc-list

// ======== Introduction ========
.slide.transitionSlide#introduction
  %section.middle
    %h2 Introduction
    %p
.slide
  %header
    %h1 Introduction
  %section.middle
    %p
      %strong From
      isolated desktop
      %strong to
      multi-plateform, multi-user, customizable applications
    .big-arrow
      ⇩
    %p
      Poeple expect applications to adapt to their needs
      %br
      =link_to "Example", :root

// ======== Motivation ========
.slide.transitionSlide#motivation
  %section.middle
    %h2 Motivation

.slide
  %header
    %h1 Motivation
  %section.middle
    %ul.bullets
      %li No support for this kind of adaptations in current languages
      %li New paradigms emerged to address the adaptable application concern
      %li Solutions exist, but improvements are needed to be industrial ready


// ======== Objectives ========
.slide.transitionSlide#objectives
  %section.middle
    %h2 Objectives
    %p

.slide
  %header
    %h1 Objectives
  %section.middle
    %p
      %ul.bullets
        %li Solve the problem by merging COP and FOP paradigms
        %li Use Ruby, a real-world language
        %li Integrate the solution in Ruby on Rails applications
        %li Provide an industrial ready and validated solution

// ======== Approach ========
.slide.transitionSlide#approach
  %section.middle
    %h2 Approach
    %p

.slide
  %header
    %h1 Approach
    %h2 Context as a Feature
  %section.middle
    %p
      a
      %strong context
      reifies a situation relevant for the application behaviour
      %br
      a
      %strong feature
      reifies a functionality visible to stakeholders

    .big-arrow
      ⇩
    %p
      %strong Context as a Feature
      merges the COP & FOP paradigms by expressing a
      %strong feature
      as being a
      %strong context
      with extra capabilities

.slide
  %header
    %h1 Approach
    %h2 Phenomenal
  %section
    %p
      The Phenomenal Gem is a pure Ruby COP framework which provides:
    %ul.bullets
      %li Contexts
      %li Features through Context as a Feature
      %li Behavioral adaptations
      %li Relationships
      %li Visualization tool
      %li Lightweight Domain Specific Language

.slide
  %header
    %h1 Approach
    %h2 Phenomenal: Define contexts and features
  %section
    .code_snippet.left
      %h3 Code
      =pygments("public/presentation_code/define_context.rb")
    .code_graphical_view
      %h3 Context Visualization
      =image_tag("/presentation_code/graphical_views/define_context.rb.png")
    .clear
    %ul.bullets
      %li <span class="highlight">context <span class="ss">:Evening</span></span> defines a new context with name "Evening"
      %li <span class="highlight">feature <span class="ss">:DayTimesSense</span></span> defines a new feature with name "DayTimesSense"

.slide
  %header
    %h1 Approach
    %h2 Phenomenal: Define adaptations
  %section
    .code_snippet
      %h3 Code
      =pygments("public/presentation_code/define_adaptation.rb")
      %ul.bullets
        %li <span class="highlight">adaptation_for <span class="s2">PagesHelper</span></span> specifies the class to be adapted
        %li <span class="highlight">adapt <span class="ss">:phenomenal_color</span></span> adapts the instance method 
        %li <span class="highlight">proceed</span> calls "super context" implementation
        
.slide
  %header
    %h1 Approach
    %h2 Phenomenal: Define combined contexts
  %section
    .code_snippet.left{:style=>"width:250px;"}
      %h3 Code
      =pygments("public/presentation_code/define_combined_context.rb")
    .code_graphical_view
      %h3 Context Visualization
      =image_tag("/presentation_code/graphical_views/define_combined_context.rb.png",:width=>"560px")
    .clear
    %ul.bullets
      %li Defines the combined context <span class="highlight"><span class="ss">"DayTimesSense,Evening"</span></span> 
      %li Allows to specify behaviour specific for a combination of contexts

.slide
  %header
    %h1 Approach
    %h2 Phenomenal: Define relationships
  %section
    .code_snippet.left{:style=>"width:510px;margin-right:0px"}
      %h3 Code
      =pygments("public/presentation_code/define_relationship.rb")
    .code_graphical_view
      %h3 Context Visualization
      =image_tag("/presentation_code/images/defineRelationship.svg",:width=>"315px")
    .clear
    %ul.bullets
      %li <span class="highlight">implications_for <span class="ss">:InternetExplorer, :on</span>=><span class="ss">:Windows</span></span>
      %li <span class="highlight">implies <span class="ss">:Windows</span></span>
      %li Other relationships are available
.slide
  %header
    %h1 Approach
    %h2 Phenomenal Rails
  %section
    %p
      The Phenomenal Rails Gem integrates the Phenomenal Gem into Ruby on Rails
    %ul.bullets
      %li File structure integration
      %li Context activation condition
      %li View adaptation

.slide
  %header
    %h1 Approach
    %h2 Phenomenal Rails: File Structure Integration
  %section
    .left
      %h3 From this
      =image_tag("/presentation_code/images/monolithicFiles.svg")
    .big-arrow.left
      ⇨
    .right
      %h3 To this
      =image_tag("/presentation_code/images/phenomenalFilesLight.svg")
    .clear
    %ul.bullets
      %li Standard RoR applications use a single MVC
      %li Phenomenal Rails Gem allows to use a MVC per context
      %li Each context folder contains the context definition and its MVC

.slide
  %header
    %h1 Approach
    %h2 Phenomenal Rails: Activation Condition
  %section
    .left.code_snippet
      =pygments("public/presentation_code/activation_condition.rb")
    .right
      =image_tag("/presentation_code/images/application_stack.svg",:width=>"350x")
    .clear
    %ul.bullets
      %li Contexts have to be activated per request (user change at each request)
      %li
        <span class="highlight">activation_condition</span>
        allows to store a block evaluated before each request
      %li The block specifies which contexts have to be activated
      %li The block is evaluated only when the feature is active

.slide
  %header
    %h1 Approach
    %h2 Phenomenal Rails: View Adaptation
  %section
    %h2.center Views are not Ruby methods

    %h3 How to adapt this
    =pygments("public/presentation_code/announce.html.haml",:haml)
    %h3 Into this
    =pygments("public/presentation_code/adapted_announce.html.haml",:haml)

.slide
  %header
    %h1 Approach
    %h2 Phenomenal Rails: View Adaptation
  %section
    .left
      %h3 Base view
      =image_tag("/presentation_code/images/viewNotAdapted.svg")
    .right
      %h3 Adapted view
      =image_tag("/presentation_code/images/viewAdapted.svg")
    .clear
    %ul.bullets
      %li
        To adapt a view a context must define a file with the same name and views folder
      %li The file displayed is the one in active contexts with higher precedence

// ======== Validation ========
.slide.transitionSlide#validation
  %section.middle
    %h2 Validation
    %p
    
.slide
  %header
    %h1 Validation
    %h2 Benubo
  %section.middle
    %p
      =image_tag("/presentation_code/images/benubo.png")
      %br
      SaaS ERP to manage SME activities developed by Belighted
    %ul.bullets
      %li Validates our concepts
      %li Leads to improvements of our solution
      %li Provides industrial feedback  
.slide
  %header
    %h1 Validation
    %h2 Feature as a Service
  %section.middle
    %p
      The development of the previous concepts and their application in Benubo leaded to the notion of
      %strong Feature as a Service
    %ul.bullets
      %li FaaS pushes the idea of Software as a Service further
      %li Allows to sell sub-components of an application to users
      %li Doable very easily with the Phenomenal Rails Gem
    %p=link_to "Example", :root
          
.slide
  %header
    %h1 Validation
    %h2 Benchmarks
  %section.middle  
    %p
      =image_tag("/presentation_code/images/benchmark.svg")
    
// ======== Contributions ========
.slide.transitionSlide#contributions
  %section.middle
    %h2 Contributions
    %p

.slide
  %header
    %h1 Contributions
  %section
    %h2 Concepts
    %ul.bullets
      %li Context as a Feature
      %li Feature as a Service

    %h2 Implementation
    %ul.bullets
      %li Phenomenal & Phenomenal Rails Gems
      %li Visualization tool
      %li Activation condition
      %li Validation case-study (Benubo)
      %li Lightweight Domain Specific Language

// ======== Conclusion ========
.slide.transitionSlide#conclusion
  %section.middle
    %h2 Conclusion
    %p

.slide
  %header
    %h1 Conclusion
  %section.middle
    %ul.bullets
      %li First step towards merging COP & FOP paradigms
      %li
        <span class="highlight"><span class="nb">require</span> <span class="s2">&quot;phenomenal&quot;</span></span>
        allows to adapt any existing Ruby application easily
      %li Enhanced dynamic adaptability at a reasonable cost
      %li Validated on a real Software as a Service

.slide
  %header
    %h1 That's the real story

  %section.middle.formula{"data-build"=>"data-build"}
    %span= image_tag("ruby.png",:width=>"10%")
    +
    %span= image_tag("rails.png",:width=>"10%")
    +
    %span= image_tag("pheno_logo.png",:width=>"10%")
    \=
    %span.hearth ♥

// ======== Questions ? ========
.slide
  %section#question-slide.middle
    %h2 Questions ?
