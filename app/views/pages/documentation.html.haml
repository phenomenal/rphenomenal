.documentation
  %h1=@title
  %h2 Phenomenal
  %h3 Download
  %p
    Coming soon
  %h3 Domain Specific Language
  %h4  phen_define_context(name=nil,priority=nil)
  %p
    Define a new context with optional name and priority.
  
  %h4 phen_context(*args,&block), alias: context
  %p
    Define a context with name passed in 
    %tt *args
    (if multiple name are passed then it will define a combined context).
    %br
    The content of the block will contain the relations and the adaptations of the context.
    
  %h4 phen_feature(*args,&block), alias: feature
  %p
    Define a feature (a context persistent between HTTP requests in rails applications).
  
  %h4 phen_forget_context(context)
  %p
    Forget a context (must be inactive before).
    
  %h4 phen_add_adaptation(context,klass, method_name, &implementation)
  %p
    Add an adaptation to a context for class 
    %tt klass
    and method
    %tt method_name
    with the block as implementation.

  %h4 phen_remove_adaptation(context,klass,method_name) 
  %p 
    Remove an adaptation from a context.

  %h4 phen_activate_context(context), alias: activate_context
  %p
    Activate a context.
    
  %h4 phen_deactivate_context(context), alias: deactivate_context
  %p
    Deactivate a context (the context will became inactive only if as many deactivations has been performed than the number of activations.

  %h4 phen_context_active?(context)
  %p
    Return 
    %tt true 
    if 
    %tt context
    is active

  %h4 phen_context_informations(context)
  Return a hash with the useful informations concerning the context:
  %ul
    %li Name
    %li List of the adaptations names
    %li Active state
    %li Activation age

  %h4 phen_default_context
  %p
    Return the default context (containing the default adaptations of the methods).

  %h4 phen_defined_contexts    
  %p
    Return the list of defined contexts (the ones registered in the manager).

  %h4 phen_proceed(*args,&block), alias: proceed
  %p
    Call the underneath adaptation for the method calling this one.
    The adaptation that will be called depends of the conflict resolution policy.

  %h4 phen_change_conflict_policy(&block)
  %p
    Allow to change the conflict resolution policy used by 
    %tt Phenomenal::Manager
    \.
  .snippet
    :coderay
      #!ruby
      phen_change_conflict_policy { |a,b| no_resolution_conflict_policy(a,b) }
    %p Setting no resolution conflict policy
    

